<style lang="scss">
  @import "../styles/basic/mixins";
  /*@import "../style/icons";*/

  .com-counter {
    position: relative;
    height: rpx(50);
    display: inline-flex;
    justify-content: center;
    align-items: center;
    vertical-align: middle;
    background-color: #fff;
  
    @include with-border(#e6e6e6);
  
    .counter-btn {
      width: rpx(60);
      height: 100%;
      padding: 0 rpx(5);
      display: inline-flex;
      justify-content: center;
      align-items: center;
      font-size: rpx(30);
      font-weight: 100;
      line-height: 1;
      background: none;
      color: #D9D9D9;
      border: none;
      border-radius: 0;
    
      &::after {
        content: none;
      }
    
      @include with-border(#e6e6e6);
    }
    .counter-val {
      position: relative;
      z-index: 1;
      width: rpx(80);
      height: 100%;
      min-height: 100%;
      padding: 0;
      margin: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      text-align: center;
      overflow: hidden;
      background-color: #fff;
    
      font-size: rpx(32);
      line-height: 1;
      border: none;
      // border: rpx(1) solid #e6e6e6;
      // @include with-border(#e6e6e6);
    }
  
    &.counter-large {
      height: rpx(80);
    
      .counter-btn {
        width: rpx(80);
        padding: 0 rpx(10);
        font-size: rpx(38);
      }
      .counter-val {
        width: rpx(120);
      }
    }
  }

</style>
<template>
  <view class="com-counter {{size ? ('counter-' + size) : ''}}">
    <button class="counter-btn" @tap="minus" disabled="{{value <= min}}"><text class="iconfont icon-minus"></text></button>
    <input class="counter-val" type="number" value="{{value}}" disabled="{{false}}"
           @input="input"
           @blur="blur"/>
    <button class="counter-btn" @tap="plus" disabled="{{max && value >= max}}"><text class="iconfont icon-plus"></text></button>
  </view>
</template>
<script>
  import wepy from 'wepy'

  export default class Counter extends wepy.component {
    // components = {}

    props = {
      value: {
        type: [Number, String],
        default: 1
      },
      min: {
        type: [Number, String],
        default: 1
      },
      max: {
        type: [Number, String],
        default: null // 0 for No limit
      },
      size: String
    }

    data = {}

    setValue (value) {
      value = ~~value
      let min = ~~this.min

      if (value < min) {
        this.value = min
      } else if (this.max !== null && value > ~~this.max) {
        this.value = ~~this.max
      } else {
        this.value = value
      }

      this.$apply()

      return this.value
    }

    init () {
      this.setValue(this.value)
    }

    methods = {
      plus () {
        let old = ~~this.value
        if (this.max === null || old < this.max) {
          this.value = old + 1
          this.$emit('plus', this.value, old)
        }
      },

      minus () {
        let min = ~~this.min
        let old = ~~this.value
        if (old > min) {
          this.value = old - 1
          this.$emit('minus', this.value, old)
        }
      },

      input (e) {
        let old = this.value
        let cur = this.setValue(e.detail.value)
        this.$emit('input', cur, old)
        return String(cur) // WeApp requires returning a String
      },

      blur (e) {
        let old = this.value
        let cur = this.setValue(e.detail.value)
        this.$emit('blur', cur, old)
        return String(cur)
      }
    }

    events = {}
    watch = {
      value (cur, old) {
        this.$emit('change', cur, old)
      }
    }

    onLoad () {
      this.init()
    }
  }
</script>
