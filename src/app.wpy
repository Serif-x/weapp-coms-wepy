<style lang="scss" src="style/index.scss"></style>

<script>
  import wepy from 'wepy'
  import 'promise-polyfill'
  import 'wepy-async-function'
  import { shim } from 'promise.prototype.finally'
  shim()
  
  import wxTip from './common/utils/wxTip'
  import API, { sign as signAPI } from './api/api'

  const checkSession = async () => {
    return new Promise((resolve) => {
      wx.checkSession({
        success () {
          console.info('Wx session is valid')
          resolve(true)
        },
        fail () {
          console.warn('Wx session is expired')
          resolve(false)
        }
      })
    })
  }
  
  const getUserInfo = (function () {
    let userInfo = null

    return async function (outUserInfo) {
      if (outUserInfo) {
        userInfo = outUserInfo
        return userInfo
      }

      if (userInfo) {
        return userInfo
      }
  
      userInfo = await wepy.getUserInfo()
        .then(res => res.userInfo)
        .catch(() => null)

      return userInfo
    }
  }())
  
  const getAccountInfo = (function () {
    let accountInfo = null

    return async function (userInfo) {
      if (accountInfo) {
        return accountInfo
      }
  
      const _loginRes = await wepy.login().catch(() => null)
  
      if (!_loginRes) {
        return null
      }
  
      const { code } = _loginRes
  
      if (!userInfo) {
        userInfo = await getUserInfo()
      }
  
      accountInfo = await API.login({ code, userInfo })
        .then(res => res.data)
        .catch(() => null)
  
      return accountInfo
    }
  }())

  export default class extends wepy.app {
    config = {
      window: {
        backgroundTextStyle: 'dark',
        navigationBarBackgroundColor: '#D92A21',
        navigationBarTitleText: '小程序基础设施',
        navigationBarTextStyle: 'white'
        // navigationStyle: 'custom',
      },
      pages: [
        'pages/index'
      ],
      debug: true
    };

    globalData = {
      userInfo: null,
      accountInfo: null
    };

    constructor () {
      super()
      this.use('promisify')
      this.use('requestfix')
    }

    /* region Life cycle */
    async onLaunch (option) {
      // APP 初始化
      this.appInit()

      // 获取账户信息
      const accountInfo = await this.getAccountInfo()

      // 账户初始化
      this.accountInit(accountInfo)
    }

    async onShow (option) {
      console.log(option)
    }

    onError (res) {
      console.error(res)
    }
    /* endregion Life cycle */

    /* region Methods */

    async appInit () {
      // 关闭调试
      wx.setEnableDebug({ enableDebug: false })

      // 检查版本更新
      if (wx.getUpdateManager) {
        const updateManager = wx.getUpdateManager()
        updateManager.onCheckForUpdate((res) => {
          console.info(`Check update info: %o`, res)
        })
        updateManager.onUpdateReady(async () => {
          const confirm = await wxTip.confirm('新版本来啦！多处功能优化，体验更舒适，服务更稳定，马上重启应用体验吧！', {
            title: '版本更新',
            confirmText: '立即体验',
            cancelText: '稍后再说'
          }).catch(() => false)

          if (confirm) {
            updateManager.applyUpdate()
          }
        })
        updateManager.onUpdateFailed(() => {
          // 新的版本下载失败
          wxTip.info('新版本下载失败，稍后重试')
        })
      }
    }

    async accountInit (accountInfo) {
      console.log('App initial account info: %o', accountInfo)
    }

    /* region 账户信息 */
    async getUserInfo () {
      return getUserInfo()
        .then((res) => {
          console.info('User info: %o', res)
          return res
        })
    }
  
    async getAccountInfo ({userInfo, retry = false} = {}) {
      const isSessionValid = await checkSession().catch(() => false)
  
      if (isSessionValid && this._getAccountInfoPromise && !retry) {
        return this._getAccountInfoPromise
      }
  
      this._getAccountInfoPromise = getAccountInfo(userInfo)
        .then(async (accountInfo) => {
          if (!accountInfo) {
            return null
          }
  
          console.info('Account info: %o', accountInfo)
          const { userId } = accountInfo
  
          // Sign API request
          signAPI({ userId })
  
          return accountInfo
        })
  
      return this._getAccountInfoPromise
    }
    /* endregion 账户信息 */
  
    /* endregion Methods */
  }
</script>
